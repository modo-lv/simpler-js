// Generated by LiveScript 1.3.1
(function(){
  var DependencyConfig, DependencyResolution, DependencyResolver;
  DependencyConfig = require("./DependencyConfig");
  DependencyResolution = require("./DependencyResolution");
  DependencyResolver = (function(){
    DependencyResolver.displayName = 'DependencyResolver';
    var prototype = DependencyResolver.prototype, constructor = DependencyResolver;
    function DependencyResolver(){
      this.newLifetime = bind$(this, 'newLifetime', prototype);
      this.prepare = bind$(this, 'prepare', prototype);
      this.resolve = bind$(this, 'resolve', prototype);
      this.register = bind$(this, 'register', prototype);
      this._keyFor = bind$(this, '_keyFor', prototype);
      this._registry = {};
    }
    /**
    * Registered dependencies
    */
    prototype._registry = {};
    /**
    * Created instances
    */
    prototype._instances = {};
    /**
    * Get the dependency registration name (key) for an object
    */
    prototype._keyFor = function(target){
      if (typeof target === "function") {
        return target;
      } else {
        return JSON.stringify(target);
      }
    };
    /**
    * Create a new instance of a given function.
    * New instance will have a property "_dr" that is set to this dependency resolver.
    * @param {Function} func - Function to create new instance of
    * @param {Array} args - Arguments to pass to the constructor
    */
    prototype._new = function(func, args){
      var x$, ref$;
      x$ = new (ref$ = function(a){
        return func.apply(this, a);
      }, ref$.prototype = func.prototype, ref$)(args);
      x$._dr = this;
      return x$;
    };
    /**
    * Register a new dependency.
    * @param {Object|Function} Object or function to register.
    * @return {Object} Dependency configuration object for further dependency customization.
    */
    prototype.register = function(target){
      var result, i$, len$, t, key;
      if (target.constructor === Array) {
        result = [];
        for (i$ = 0, len$ = target.length; i$ < len$; ++i$) {
          t = target[i$];
          result = result.concat(this.register(t));
        }
        return result;
      }
      key = this._keyFor(target);
      if (this._registry[key] != null) {
        throw new Error("Dependency already registered: " + key);
      }
      return this._registry[key] = new DependencyConfig(target);
    };
    /**
    * Resolve a dependency
    * @param {Object} Dependency "class".
    * @returns {Object} Instance
    */
    prototype.resolve = function(target){
      var ref$, args, key, config, instance;
      if (target.constructor.displayName === DependencyResolution.displayName) {
        ref$ = [target.arguments, target.obj], args = ref$[0], target = ref$[1];
      }
      key = this._keyFor(target);
      config = this._registry[key];
      if (config == null) {
        throw new Error("Dependency not registered: " + key);
      }
      if (config.instance.type === "none") {
        return target;
      }
      if (config.instance.type === "lifetime") {
        instance = this._registry[key];
      }
      if (instance == null) {
        instance = this._new(target, args);
      }
      return instance;
    };
    prototype.prepare = function(target){
      return new DependencyResolution(this, target);
    };
    /**
    * Create a new instance of DependencyResolver with the same configuration
    */
    prototype.newLifetime = function(){
      var newLife, key, ref$, val, results$ = [];
      newLife = new DependencyResolver;
      for (key in ref$ = _registry) {
        val = ref$[key];
        results$.push(newLife._registry[key] = clone$(_registry[key]));
      }
      return results$;
    };
    return DependencyResolver;
  }());
  if (typeof module != 'undefined' && module !== null) {
    module.exports = DependencyResolver;
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
}).call(this);
